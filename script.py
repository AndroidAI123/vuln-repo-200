import os
import random
import subprocess
import time

# Th∆∞ m·ª•c ch·ª©a c√°c file "nh·∫°y c·∫£m"
VULN_DIR = "vuln_files"

# Danh s√°ch c√°c lo·∫°i file "nh·∫°y c·∫£m" c√≥ th·ªÉ ƒë∆∞·ª£c t·∫°o
SENSITIVE_FILES = [".key", ".pat", ".rsa", ".pem"]

# Danh s√°ch c√°c file text th√¥ng th∆∞·ªùng
TEXT_FILES = ["data1.txt", "data2.txt", "notes.txt"]

# S·ªë l∆∞·ª£ng commit c·∫ßn t·∫°o
NUM_COMMITS = 20

# ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
if not os.path.exists(VULN_DIR):
    os.makedirs(VULN_DIR)

def generate_random_files():
    """T·∫°o file ng·∫´u nhi√™n d·ª±a tr√™n x√°c su·∫•t"""
    prob = random.random()  # X√°c su·∫•t gi·ªØa 0 v√† 1
    files_created = []

    if prob < 0.5:
        # 50% t·∫°o c√°c file ch·ª©a th√¥ng tin nh·∫°y c·∫£m
        num_files = random.randint(1, 3)  # T·∫°o t·ª´ 1 ƒë·∫øn 3 file
        for _ in range(num_files):
            file_name = random.choice(SENSITIVE_FILES)
            file_path = os.path.join(VULN_DIR, f"fake_secret_{random.randint(1000, 9999)}{file_name}")
            with open(file_path, "w") as f:
                f.write(f"Fake sensitive data for {file_name}")
            files_created.append(file_path)
    else:
        # 50% ch·ªâ t·∫°o file .txt b√¨nh th∆∞·ªùng
        num_files = random.randint(1, 3)
        for _ in range(num_files):
            file_name = random.choice(TEXT_FILES)
            file_path = os.path.join(VULN_DIR, f"{random.randint(1000, 9999)}_{file_name}")
            with open(file_path, "w") as f:
                f.write(f"Normal text content for {file_name}")
            files_created.append(file_path)

    return files_created

def git_commit(commit_num):
    """T·∫°o commit v·ªõi c√°c file ƒë∆∞·ª£c sinh ra"""
    files = generate_random_files()

    # Add t·∫•t c·∫£ c√°c file v√†o Git
    subprocess.run(["git", "add", "."], check=True)

    # Commit v·ªõi n·ªôi dung t√πy ch·ªânh
    commit_message = f"Auto commit #{commit_num}"
    subprocess.run(["git", "commit", "-m", commit_message], check=True)

    print(f"‚úÖ Commit {commit_num}/20 created with files: {files}")

def main():
    for i in range(1, NUM_COMMITS + 1):
        git_commit(i)
        time.sleep(1)  # Ch·ªù 1 gi√¢y ƒë·ªÉ tr√°nh commit tr√πng timestamp

    # Push l√™n remote (n·∫øu c·∫ßn)
    push_confirm = input("B·∫°n c√≥ mu·ªën push l√™n GitHub kh√¥ng? (y/n): ").strip().lower()
    if push_confirm == "y":
        subprocess.run(["git", "push", "origin", "main"], check=True)
        print("üöÄ Code ƒë√£ ƒë∆∞·ª£c push l√™n GitHub!")

if __name__ == "__main__":
    main()
